version: "3.8"

services:
  #Chirpstack
  chirpstack-network-server:
    image: chirpstack/chirpstack-network-server:3.15
    volumes:
      - ./configuration/chirpstack-network-server:/etc/chirpstack-network-server

  chirpstack-application-server:
    image: chirpstack/chirpstack-application-server:3.17
    ports:
      - 8080:8080
    volumes:
      - ./configuration/chirpstack-application-server:/etc/chirpstack-application-server

  chirpstack-gateway-bridge:
    image: chirpstack/chirpstack-gateway-bridge:3.13
    ports:
      - 1700:1700/udp
    volumes:
      - ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge

  postgresql:
    image: postgres:9.6-alpine
    environment:
      - POSTGRES_PASSWORD=root
    ports:
      - 5434:5432
    volumes:
      - ./configuration/postgresql/initdb:/docker-entrypoint-initdb.d
      - postgresqldata:/var/lib/postgresql/data

  redis:
    image: redis:5-alpine
    volumes:
      - redisdata:/data

  mosquitto:
    image: eclipse-mosquitto:2
    ports:
      - 1883:1883
    volumes:
      - ./configuration/eclipse-mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf

  #OS2IoT
  os2iot-frontend:
    image: "os2iot-frontend"
    build:
      context: "../OS2IoT-frontend"
      dockerfile: "Dockerfile-prod"
    ports:
      - "8081:8081"
    environment:
      PRODUCTION: "false"
      BASE_URL: http://localhost:3000/api/v1/
      TABLE_PAGE_SIZE: 25

  #OS2IoT
  os2iot-lorawanSimulator:
    image: "os2iot-lorawan_simulator"
    build:
      context: "./simulator"
      dockerfile: "Dockerfile"
    ports:
      - "8768:8000"

  #OS2IoT
  os2iot-lorawanSimulator:
    image: "os2iot-lorawan_simulator"
    build:
      context: "./simulator"
      dockerfile: "Dockerfile"
    ports:
      - "8768:8000"

  os2iot-backend:
    image: "os2iot-backend"
    build:
      context: ../OS2IoT-backend
      dockerfile: Dockerfile
      target: prod
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/status"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - os2iot-postgresql
    environment:
      DATABASE_HOSTNAME: os2iot-postgresql
      DATABASE_PORT: 5432
      KAFKA_HOSTNAME: os2iot-kafka
      KAFKA_PORT: 9092
      CS_MQTT_HOSTNAME: mosquitto
      CS_MQTT_PORT: 1883
      CHIRPSTACK_APPLICATION_SERVER_HOSTNAME: chirpstack-application-server
      CHIRPSTACK_NETWORK_SERVER: chirpstack-network-server
      LOG_LEVEL: debug

  os2iot-postgresql:
    restart: always
    image: postgis/postgis # We need postgis to store geodata
    ports:
      - 5433:5432
    hostname: os2iot-pg
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U os2iot"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: os2iot
      POSTGRES_USER: os2iot
      POSTGRES_PASSWORD: toi2so
    volumes:
      - ./configuration/os2iot-postgresql/initdb:/docker-entrypoint-initdb.d
      - pg-data:/var/lib/postgresql:Z

  os2iot-zookeeper:
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - os2iot-zookeeperdata:/data
    tmpfs: "/datalog"

  os2iot-kafka:
    image: "bitnami/kafka:latest"
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092,INTERNAL://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://os2iot-kafka:9092,INTERNAL://127.0.0.1:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_ZOOKEEPER_CONNECT=os2iot-zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - os2iot-kafkadata:/var/lib/kafka/data
    depends_on:
      - os2iot-zookeeper

volumes:
  pg-data:
  postgresqldata:
  redisdata:
  os2iot-kafkadata:
  os2iot-zookeeperdata:
